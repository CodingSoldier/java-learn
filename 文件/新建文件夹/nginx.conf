# 参考教程 http://www.nginx.cn/76.html  
#user  nobody;
#启动进程，通常设置成和CPU的数量相等
worker_processes  2;

#全局错误日志
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid是nginx运行时的进程号
#pid        logs/nginx.pid;

#工作模式及连接数上限
events {
    #epoll是多路复用IO（I/O Multiplexing）中的一种方式
    #仅用于Linux2.6以上内核，可大大提高nginx的性能
    #use epoll;

    #单个后台worker process进程的最大并发连接数
    worker_connections  1024;
}


http {
    #设定mime类型，类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile 指定Nginx是否调用，sendfile函数（zero copy方式）输出文件
    #对于普通应用必须设置为on
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为off
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime
    sendfile        on;
    #tcp_nopush     on;

    #连接超时时间单位是秒S
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #开启gzip压缩
    #gzip  on;

    #设定请求缓冲
    #client_header_buffer_size 128k;
    #large_client_header_buffers 4 128k;

    #缓存设置
    proxy_connect_timeout 5;
    proxy_read_timeout 60;
    proxy_send_timeout 5;
    proxy_buffer_size 16k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    proxy_temp_path ./webcache/temp;
    proxy_cache_path ./webcache/cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;

    #负载均衡，配置两个后端服务器
    #upstream balance {
    #    server localhost:9605;
    #    server localhost:9604;
    #}
    #ajax的URL以"/api/police"被转换成http://localhost:9605/police、http://localhost:9604/police
    #location /api {
    #    proxy_pass  http://balance/;
    #}

    #设定虚拟主机配置
    server {
        #监听80端口，可以使用localhost来访问，
        #若改成8080则需要通过localhost:8080访问
        listen       8080;   
        #定义使用localhost访问
        #server_name  localhost;
        #使用www.web1.com域名访问，需要配置hosts 127.0.0.1 www.web1.com 将域名定位到本机
        server_name www.web1.com;

        #charset koi8-r;

        #设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        location / {
            #访问本service网站时默认的根目录
            #root   html; 
            root website;

            #网站首页引索文件的的名称 
            index  index.html index.htm;
        }

        #错误提示页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        #请求转发
        #1、注释掉hosts中的127.0.0.1 localhost，用wampserver启动一个本地服务
        #2、将 域名:端口/php/ 的请求转发到http://localhost/nginxweb/php/服务器下
        #3、http://www.web1.com:8080/php/1.get.php?username=u1&age=1 请求变成：
        #   http://localhost/nginxweb/php/1.get.php?username=u1&age=1
        location /php/ {
            proxy_pass http://localhost/nginxweb/php/;
        }

        # 静态文件处理
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {
            #到C:/wamp64/www/nginxweb/中请求静态文件
            root C:/wamp64/www/nginxweb/;

            #缓存设置
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_cache cache_one;
            proxy_cache_valid 200 302 1m;
            proxy_cache_valid 301 1d;
            proxy_cache_valid any 1m;

            #过期30天，静态文件不怎么更新，过期可以设置大一点，
            #如果频繁更新，则可以设置小一点
            expires 30d;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        # 禁止访问 .htXXXXX文件
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
