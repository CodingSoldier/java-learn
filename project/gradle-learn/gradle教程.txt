安装gralde
	1、安装jdk
	2、下载gradle
	3、配置环境变量 GRADLE_HOME
		GRADLE_HOME = E:\gradle-5.6.2
	4、添加 %GRADLE_HOME%\bin;  到path中
	5、gradle -v  验证是否安装成功

gradle目录：
    bin       目录中有两个脚本，gradle.bat是在windows环境启动一个jvm，加载lib库的jar包，启动gradle
	init.d    每一次构建开始时，都会执行此目录下的脚本。可放置公共的初始化脚本
	lib       gradle本身所依赖的jar包，因为gradle基于jvm，所以也会有依赖包
	media     一些图标

Groovy与Java比较
	Groovy完全兼容Java语法
	分号可选
	类、方法默认是public的
	Groovy编译器自动给属性添加getter、setter方法
	属性可以直接使用点号获取
	最后一个表达式的值会被作为返回值
	== 等同于equals()，不会有NullPointException
	assert语句
	可选类型定义
	可选括号
	闭包


/**
 * groovy语法
 */
/**
 * Groovy完全兼容Java语法
 *
 * 类、方法默认是public的
 */
class ProjectVersion{
    /**
     * 可以不加分号
     */
    private int bigVersion
    private int littleVersion

    ProjectVersion() {
    }

    ProjectVersion(int bigVersion, int littleVersion) {
        this.bigVersion = bigVersion
        this.littleVersion = littleVersion
    }

    /**
     * 最后一个表达式的值会被作为返回值
     */
    int getBigVersion(){
        bigVersion
    }
}
ProjectVersion pv1 = new ProjectVersion(1, 11)
/**
 * 通过 . 可以访问属性
 */
println pv1.bigVersion
/**
 * Groovy编译器自动给属性添加getter、setter方法
 */
println pv1.littleVersion

/**
 * == 等同于equals()，不会有NullPointException
 */
ProjectVersion pv2 = null
println pv1 == pv2

/**
 * 命名参数
 * new ProjectVersion(littleVersion: 22, bigVersion: 2)是new ProjectVersion([littleVersion: 22, bigVersion: 2])
 *所以要有一个无参构造函数
 */
ProjectVersion pv3 =new ProjectVersion(littleVersion: 22, bigVersion: 2)
println pv3.bigVersion
println pv3.littleVersion

/**
 * 可选的类型定义
 */
def version = 1

/**
 * assert语句
 */
assert version == 1

/**
 * 括号可选。
 */
println(version)
println version

/**
 * 字符串
 */
def s1 = '单引号中就纯粹的字符串'
def s2 = "双引号中通过\$后去变量${version}"
def s3 = '''三个单引号
可以
换行'''
println s1
println s2
println s3

/**
 *集合api
 */
// list。是ArrayList类型
def l1 = ['ant', 'maven']
// 往list中添加元素
l1 << 'gradle'
println l1.toString()
println l1.getClass().getName()

//map
def m1 = ['ant': 2000, 'maven': 2004]
// map添加元素
m1.gradle = 2009
println m1.ant
println m1.toString()
println m1.getClass().getName()

/**
 * 闭包
 */
// 闭包也是一个函数，可以执行
def c01 = {}
c01()

def c02 = {return "闭包返回值"}
println c02()

def c03 = {param1 -> return 1 + param1}
println c03(1)


// 包含参数的闭包
def c1 = {
    v -> println v
}
// 不包含参数的闭包
def c2 = {
    println '没有参数的闭包'
}
// 定义方法
def method1(Closure closure){
    closure('参数')
}
def method2(Closure closure){
    closure()
}
// 执行方法，参数是闭包。方法括号可写可不写
method1 c1
method2(c2)

/*
gradle构建脚本默认都有一个Project实例

//apply一个方法，省略了括号
//plugin: 'java' 这是命名参数的写法。参数名是plugin，参数值是'java'
apply plugin: 'java'

// 定义变量
version = '0.1'

// repositories 是一个方法，参数是一个闭包
repositories {
    mavenCentral()
}

// dependencies 也是一个方法，参数是一个带参数的闭包
// compile 也是一个方法，参数是'commons-codec:commons-codec:1.6'
dependencies {
    compile 'commons-codec:commons-codec:1.6'
}

*/



build.gradle的配置(类似于Maven工程中的pom.xml相同)


idea配置Gradle
	Settings ——> Gradle ——> Gradle user home 配置为本机gradle home目录
	新建Gradle项目的时候不要点击应用建议，不然会下载一个gradle安装包，但是需要去配置：Use Gradle from 选择Specified location = gradle home目录

idea新建gradle。
	new project
	选择Gradle，Java
	再次搜索Settings ——> Gradel ——> Gradle project ——> 
		Use Gradle from 选择Specified location = gradle home目录
	本项目使用groovy，打开groovy console。idea ——> tools ——> groovy console

gradle不要勾选自动导入，不然每次修改build.gradle都会执行build.gradle的任务


idea打包gradle
	Gradle窗口 ——> 找到项目 ——> Tasks ——> build ——> 双击jar。
	打出来的jar包在build ——> build ——> lib目录下
	运行jar包： java -classpath project\gradle-learn\gradle-02-java\build\libs\g
radle-02-java-1.0-SNAPSHOT.jar com.cpq.model.App

构建脚本的概要
	Gradle构建中的两个基本概念是项目（project）和任务（task），每个构建至少包含一个项目，项目中包含一个或多个任务。
	在多任务构建中，一个项目可以依赖于其他项目，类似的，任务可以形成一个依赖关系图来确保他们的执行顺序。

构建脚本
	一个项目代表一个正在构建的组件（比如一个jar文件），当构建启动后，Gradle会基于build.gradle实例化一个org.gradle.api.Project类，并且能够通过project变量使其隐式可用。也就是说build.gradle中所有的方法、变量都是project实例的方法、变量。在build.gradle中写project.后就会有语法提示
	通过group、name（在idea中是Artifactid）、version能唯一确定一个组件（jar包）
	project的重要方法
		apply        应用一个插件
		repositories 声明去哪个仓库找依赖包
		dependency   声明依赖
		task         声明project有什么任务

任务
	任务对应org.gradle.api.Task。主要包括任务动作和任务依赖。任务动作定义了一个最小的工作单元。可以定义依赖于其他任务、动作序列和执行条件。
	dependsOn  依赖于哪些任务
	doFirst、doLast、<< 两个小于号跟doLast一样，是一个简写方式
	插件本身自带任务，在idea  Tasks中可以看到项目有哪些任务
	执行jar任务
		> Task :compileJava UP-TO-DATE  UP-TO-DATA表示输入输出没有变化，即项目没有改动。会跳过任务
		> Task :processResources UP-TO-DATE
		> Task :classes UP-TO-DATE
		> Task :jar

settings.gradle管理多项目构建。在本例子中只有一行配置
rootProject.name = 'gradle-02-java'
只管理一个项目

常用仓库
	mavenLocal      本地maven仓库
	mavenCentral    公网公共仓库
	jcenter         公网公共仓库


多模块，查看 gradle-03-multi-project
    1、新建多模块项目 gradle-03-multi-project
       新建gradle.properties，配置以下内容。所有模块（包括rootProject）便能使用以下属性配置。可模块的group、version配置
           group = 'org.example'
           version = '1.0-SNAPSHOT'
       配置build.gradle
       settings.gradle是管理多模块的，里面包含rootProject.name和子模块名
       rootProject的src可以删除
    2、新建子模块model，将settings.gradle的内容全部删除。
       model模块中可以使用logback日志依赖。测试用例中用了logback
    3、新建子模块service01，配置service01依赖model。详情查看build.gradle、测试用例

发布，查看build.gradle。
配置好部署插件之后，Gradle窗口多了publishing。
点击publishToMavenLocal会发布到本地maven仓库


wrapper
    创建demo目录，进入demo目录
    执行 gradle wrapper 。会生成一个很小的gradle-wrapper.jar的jar包、一个脚本
    gradle/wrapper可以上传到代码仓库，当别人克隆项目下来后，window环境将执行gradle.bat，判断本地是否有相应的gradle版本，没有则会下载一个。下载目录默认是C:\Users\Administrator\.gradle\wrapper\dists

GradleUserHome
	默认路径是\Users\Administrator\.gradle


插件
    新建 gradle-04-plugin
    在gradle-04-plugin下执行 gradle wrapper
    编写build.gradle
    在gradle-04-plugin目录下执行gradlew.bat task7、gradlew.bat task6



/**
 * 解决idea gradle项目中文报错。有中文的gradle模块build.gradle文件中加入以下配置
 */
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
