1、新建Module，spring-mvc-demo
2、选择Gradle，java、Web


新建idea tomcat配置
1、配置Tomcat目录
2、VM opetions 设置 -Dfile.encoding=UTF-8
3、Deployment 添加war包（不能是散包）。修改Application context的名称spring-mvc-demo

修改build.gradle
1、引入spring-mvc依赖。
    complie(project(":spring-webmvc"))
2、引入servlet、jsp
https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api/4.0.1
点击Gradle
    // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    改为
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    // https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api
    providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.3'
    改为
    compile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.3'
3、依赖最终如下
dependencies {
    complie(project(":spring-webmvc"))
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    compile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

Spring MVC核心流程
    1、建立请求和Controller方法的映射集合
    2、根据请求查找对应的Controller方法
    3、请求参数绑定方法形参，执行方法处理请求，渲染视图的流程


启动流程，tomcat最先调用的类方法
    ContextLoaderListener.contextInitialized()
        最终进入，此方法会被多次调用
        AbstractApplicationContext.refresh()

spring-framework认识：
    映射：HandlerMapping。定义请求和处理程序对象之间的映射关系。
    适配：HandlerAdapter
    执行：HandlerExecutionChain  处理程序执行链，由处理程序对象和任何处理程序拦截器组成。
    页面渲染：ViewResolve
    国际化：LocaleResolver，LocaleContextResolver
    个性化：ThemeResolver
    异常解析：HandlerExceptionResolver

处理方法参数解析器： HandlerMethodArgumentRestResolver
处理方法返回值解析器： HandlerMethodReturnValueHandler
内容协商处理器：ContentNegotiationManager
媒体类型：MediaType
消费媒体类型：@RequestMapping#consumes
生产媒体类型：@RequestMapping#produces
HTTP消息转换器：HttpMessageConverter
REST配置器：WebMvcConfigurer



1、建立请求和Controller方法的映射集合
bean初始化阶段
AbstractHandlerMethodMapping#processCandidateBean(String beanName){
    ...省略部分代码
    
    // beanType是类Class
    // isHandler(beanType)，Class上有@Controller或者@RequestMapping返回true
    if (beanType != null && isHandler(beanType)) {
        // 提取Controller类的url与方法的关系
        detectHandlerMethods(beanName);
    }
}

    AbstractHandlerMethodMapping#detectHandlerMethods()

    AbstractHandlerMethodMapping.initHandlerMethods()
    初始化
        AbstractHandlerMethodMapping.detectHandlerMethods()
        提取其url与controller映射关系
            RequestMappingHandlerMapping.getMappingForMethod()
            先使用Controller方法创建RequestMappingInfo，再Controller类创建RequestMappingInfo，两个RequestMappingInfo合并
        返回Map<Method, T> methods，key是Controller方法，value是RequestMappingInfo

            AbstractHandlerMethodMapping.registerHandlerMethod()
            将Controller方法注册为AbstractHandlerMethodMapping.mappingRegistry，
            AbstractHandlerMethodMapping.MappingRegistry#registry是一个Map<T, MappingRegistration<T>>，
            key是RequestMappingInfo，请求信息，包括请求方法和请求url
            value是AbstracthandlerMethodMapping，包含Controller方法

Servlet初始化阶段
DispatcherServlet.initStrategies()
    DispatcherServlet.initHandlerMappings()
    this.handlerMappings有3个，其中RequestMappingHandlerMapping请求与Controller方法映射

2、根据请求查找对应的Controller方法
发请求http://localhost:8080/test/query
FrameworkServlet.service()
    AbstractHandlerMapping.getHandler()
        RequestMappingHandlerMapping.getHandlerInternal
        返回HandlerMethod，Handler（处理器的意思）是Controller，HandlerMethod是Controller方法
            AbstractHandlerMethodMapping.getHandlerInternal
                // 获取请求url
                String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);

                找出能处理此请求的HandlerMethod（Controller方法）
                AbstractHandlerMethodMapping.lookupHandlerMethod()

        HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);
        根据handler和request获取处理器链HandlerExecutionChain，将拦截器、Controller方法被合并到HandlerExecutionChain实例中
            AbstractHandlerMapping.getHandlerExecutionChain()
            添加拦截器


3、请求参数绑定方法形参，执行方法处理请求，渲染视图的流程
DispatcherServlet.doDispatch()
    HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());
    通过handler获取对应的适配器。HandlerAdapter是处理器适配器，帮助DispatcherServlet调用处理器
        AbstractHandlerMethodAdapter.supports()
        由Adapter自己实现的supports()方法判断是否支持参数解析

    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
    调用目标Controller中的方法
        RequestMappingHandlerAdapter.handleInternal()
            RequestMappingHandlerAdapter.invokeHandlerMethod()

                //设置参数解析器
                invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);

                //设置spring mvc请求controller的method返回值处理器
                invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);

                ServletInvocableHandlerMethod.invokeAndHandle()
                    在这里通过反射调用controller中的method方法，获取返回值
                    Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);

                        获取Controller方法的实际参数值，列表
                        InvocableHandlerMethod.getMethodArgumentValues()
                            获取参数解析器
                            HandlerMethodArgumentResolverComposite.getArgumentResolver
                                由子类实现supportsParameter()方法，判断参数解析器是否支持解析参数
                                HandlerMethodArgumentResolver.supportsParameter
                                    PathVariableMethodArgumentResolver支持@PathVariable解析
                                    RequestResponseBodyMethodProcessor支持@ResponseBody解析

                            获取每个参数的参数值
                            AbstractNamedValueMethodArgumentResolver.resolveArgument()

                        使用参数值列表，通过反射调用controller方法
                        InvocableHandlerMethod.doInvoke(Object... args)

                //在这里通过返回值处理器处理器进行二次处理，
                // 例如：如果加了方法加了@ReponseBody注解，就把结果序列化json格式再返回
                this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);

                    @ResponseBody的返回结果使用RequestResponseBodyMethodProcessor处理器
                    HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);

                返回ModelAndView的情况
                RequestMappingHandlerAdapter.getModelAndView()
                    按优先级查找能处理viewName的viewResolver，找到了就返回view
                    DispatcherServlet.resolveViewName()

                    页面渲染
                    view.render(mv.getModelInternal(), request, response);
                        跳转到视图页面
                        InternalResourceView.renderMergedOutputModel()
                            rd.forward(request, response);





